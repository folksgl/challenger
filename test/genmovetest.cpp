#include "gtest/gtest.h"
#include "../src/genmove.hpp"
#include "../src/uci.hpp"
#include <string>

using namespace std;

/*
 *  Generating moves is likely the most difficult task challenger performs. As such, its 
 *  going to recieve a little special treatment when it comes to the grouping of the 
 *  tests within this file. The tests will be grouped by move generation for specific 
 *  pieces instead of the type of tests themselves. For example, there will be one test 
 *  per section checking the number of moves generated by specific call, instead of a 
 *  single section for tests that check the same number.
 */

//
// START WHITE MOVE TESTS //////////////////////////////////////////////////////
//

TEST(number_of_moves_generated, startpos_white) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    EXPECT_EQ (startpos.moves.size(), 20);
}

//
// START BLACK MOVE TESTS //////////////////////////////////////////////////////
//

TEST(number_of_moves_generated, startpos_black) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    EXPECT_EQ (startpos.moves.size(), 20);
}

//
// START WHITE PAWN GENERATION TESTS ///////////////////////////////////////////
//

TEST(number_of_moves_generated, startpos_white_pawns) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/1P4P1 w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    EXPECT_EQ (startpos.moves.size(), 16);
}

TEST(correct_moves_generated, startpos_white_pawns) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/2BQKB2 w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);
    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 16);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "a2a3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "a2a4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "b2b3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "b2b4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),   "c2c3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),   "c2c4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),   "d2d3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),   "d2d4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),   "e2e3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),   "e2e4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),  "f2f3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),  "f2f4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),  "g2g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),  "g2g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),  "h2h3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[15]),  "h2h4");
}

TEST(correct_moves_generated, tripple_pawn_standoff_white) {
    std::string test = "rnbqkbnr/pp3ppp/8/2ppp3/2PPP3/8/PP3PPP/1P4P1 w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);
    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 14);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "a2a3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "a2a4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "b2b3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "b2b4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),   "c4d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),   "d4c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),   "d4e5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),   "e4d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),   "f2f3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),   "f2f4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),  "g2g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),  "g2g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),  "h2h3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),  "h2h4");
}

TEST(correct_moves_generated, blocked_white_pawn) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/p7/PPPPPPPP/1P4P1 w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);
    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 15);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "b2a3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "b2b3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "b2b4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "c2c3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),   "c2c4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),   "d2d3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),   "d2d4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),   "e2e3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),   "e2e4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),   "f2f3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),  "f2f4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),  "g2g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),  "g2g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),  "h2h3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),  "h2h4");
}


TEST(capture_passant, white) {
    std::string test = "rnbqkbnr/ppp1pppp/8/2Pp4/8/8/PP1PPPPP/1P4P1 w KQkq d6 0 1";
    Position startpos(test);

    generate_moves(&startpos);
    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 16);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "a2a3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "a2a4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "b2b3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "b2b4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),   "c5c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),   "c5d6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),   "d2d3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),   "d2d4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),   "e2e3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),   "e2e4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),  "f2f3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),  "f2f4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),  "g2g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),  "g2g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),  "h2h3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[15]),  "h2h4");

}

TEST(no_blank_capture, white) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    Position startpos(test);
    startpos.move("a2a4");
    startpos.move("a7a6");

    generate_moves(&startpos);
    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.w_kingside_castle(),  true);
    ASSERT_EQ(startpos.w_queenside_castle(), true);
    ASSERT_EQ(startpos.b_kingside_castle(),  true);
    ASSERT_EQ(startpos.b_queenside_castle(), true);

    ASSERT_EQ(startpos.maps[w_pawn], 0x000000000100FE00);
    ASSERT_EQ(startpos.maps[b_pawn], 0x00FE010000000000);

    EXPECT_EQ (startpos.maps[w_rook],   0x0000000000000081); // w_rook]
    EXPECT_EQ (startpos.maps[w_knight], 0x0000000000000042); // w_knight]
    EXPECT_EQ (startpos.maps[w_bishop], 0x0000000000000024); // w_bishop]
    EXPECT_EQ (startpos.maps[w_queen],  0x0000000000000008); // w_queen]
    EXPECT_EQ (startpos.maps[w_king],   0x0000000000000010); // w_king]

    EXPECT_EQ (startpos.maps[b_rook],   0x8100000000000000); // b_rook]
    EXPECT_EQ (startpos.maps[b_knight], 0x4200000000000000); // b_knight]
    EXPECT_EQ (startpos.maps[b_bishop], 0x2400000000000000); // b_bishop]
    EXPECT_EQ (startpos.maps[b_queen],  0x0800000000000000); // b_queen]
    EXPECT_EQ (startpos.maps[b_king],   0x1000000000000000); // b_king]

    EXPECT_EQ (bit_to_square.at(startpos.maps[passant_sq]), "-");

    ASSERT_EQ(startpos.moves.size(), 21);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "a1a2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "a1a3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "a4a5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "b1a3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),   "b1c3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),   "b2b3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),   "b2b4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),   "c2c3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),   "c2c4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),   "d2d3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),  "d2d4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),  "e2e3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),  "e2e4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),  "f2f3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),  "f2f4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[15]),  "g1f3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[16]),  "g1h3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[17]),  "g2g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[18]),  "g2g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[19]),  "h2h3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[20]),  "h2h4");

}

//
// START BLACK PAWN GENERATION TESTS ///////////////////////////////////////////
//

TEST(number_of_moves_generated, startpos_black_pawns) {
    std::string test = "1p4p1/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    EXPECT_EQ (startpos.moves.size(), 16);
}

TEST(correct_moves_generated, startpos_black_pawns) {
    std::string test = "1p4p1/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 16);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "a7a5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "a7a6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "b7b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "b7b6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),   "c7c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),   "c7c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),   "d7d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),   "d7d6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),   "e7e5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),   "e7e6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),  "f7f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),  "f7f6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),  "g7g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),  "g7g6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),  "h7h5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[15]),  "h7h6");
}

TEST(correct_moves_generated, tripple_pawn_standoff_black) {
    std::string test = "1p4p1/pp3ppp/8/2ppp3/2PPP3/8/PP3PPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);
    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 14);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "a7a5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "a7a6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "b7b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "b7b6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),   "c5d4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),   "d5c4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),   "d5e4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),   "e5d4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),   "f7f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),   "f7f6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),  "g7g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),  "g7g6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),  "h7h5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),  "h7h6");
}

TEST(correct_moves_generated, blocked_black_pawn) {
    std::string test = "1p4p1/pppppppp/P7/8/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);
    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 15);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "b7a6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "b7b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "b7b6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "c7c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),   "c7c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),   "d7d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),   "d7d6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),   "e7e5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),   "e7e6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),   "f7f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),  "f7f6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),  "g7g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),  "g7g6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),  "h7h5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),  "h7h6");
}


TEST(capture_passant, black) {
    std::string test = "1p4p1/pp1ppppp/8/8/2pP4/8/PP2PPPP/RNBQKBNR b KQkq d3 0 1";
    Position startpos(test);

    generate_moves(&startpos);
    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 16);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "a7a5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "a7a6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "b7b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "b7b6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),   "c4c3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),   "c4d3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),   "d7d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),   "d7d6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),   "e7e5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),   "e7e6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),  "f7f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),  "f7f6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),  "g7g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),  "g7g6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),  "h7h5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[15]),  "h7h6");

}

//
// START WHITE KNIGHT GENERATION TESTS /////////////////////////////////////////
//

TEST(number_of_moves_generated, startpos_white_knight) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[w_pieces]);
    leaper_generator(&startpos, startpos.maps[w_knight], not_own, knight_moves);         // knight moves

    EXPECT_EQ (startpos.moves.size(), 4);
}

TEST(correct_moves_generated, startpos_white_knight) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[w_pieces]);
    leaper_generator(&startpos, startpos.maps[w_knight], not_own, knight_moves);         // knight moves

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 4);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "b1a3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "b1c3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "g1f3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "g1h3");
}

TEST(correct_moves_generated, e5_white_knight) {
    std::string test = "rnbqkbnr/pppppppp/8/4N3/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[w_pieces]);
    leaper_generator(&startpos, startpos.maps[w_knight], not_own, knight_moves);         // knight moves

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 12);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "b1a3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "b1c3");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "e5c4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "e5c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),   "e5d3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),   "e5d7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),   "e5f3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),   "e5f7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),   "e5g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),   "e5g6");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "g1f3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "g1h3");
}

//
// START BLACK KNIGHT GENERATION TESTS /////////////////////////////////////////
//

TEST(number_of_moves_generated, startpos_black_knight) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    leaper_generator(&startpos, startpos.maps[b_knight], not_own, knight_moves);         // knight moves

    EXPECT_EQ (startpos.moves.size(), 4);
}

TEST(correct_moves_generated, startpos_black_knight) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    leaper_generator(&startpos, startpos.maps[b_knight], not_own, knight_moves);         // knight moves

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 4);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "b8a6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "b8c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "g8f6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "g8h6");
}

TEST(correct_moves_generated, e4_black_knight) {
    std::string test = "rnbqkbnr/pppppppp/8/8/4n3/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    leaper_generator(&startpos, startpos.maps[b_knight], not_own, knight_moves);         // knight moves

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 12);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "b8a6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "b8c6");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "e4c3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "e4c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),   "e4d2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),   "e4d6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),   "e4f2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),   "e4f6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),   "e4g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),   "e4g5");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "g8f6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "g8h6");
}

//
// START WHITE BISHOP GENERATION TESTS ///////////////////////////////////////////
//

TEST(number_of_moves_generated, startpos_white_bishop) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[w_pieces]);
    slide_generator(&startpos, startpos.maps[w_bishop], not_own, &get_bishop_attacks); // bishop moves

    EXPECT_EQ (startpos.moves.size(), 0);
}

TEST(number_of_moves_generated, e5_white_bishop) {
    std::string test = "rnbqkbnr/pppppppp/8/4B3/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[w_pieces]);
    slide_generator(&startpos, startpos.maps[w_bishop], not_own, &get_bishop_attacks); // bishop moves

    EXPECT_EQ (startpos.moves.size(), 8);
}

TEST(correct_moves_generated, e5_white_bishop) {
    std::string test = "rnbqkbnr/pppppppp/8/4B3/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[w_pieces]);
    slide_generator(&startpos, startpos.maps[w_bishop], not_own, &get_bishop_attacks); // bishop moves

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 8);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "e5c3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "e5c7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "e5d4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "e5d6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),   "e5f4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),   "e5f6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),   "e5g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),   "e5g7");
}

//
// START BLACK BISHOP GENERATION TESTS ///////////////////////////////////////////
//

TEST(number_of_moves_generated, startpos_black_bishop) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    slide_generator(&startpos, startpos.maps[b_bishop], not_own, &get_bishop_attacks); // bishop moves

    EXPECT_EQ (startpos.moves.size(), 0);
}

TEST(number_of_moves_generated, e5_black_bishop) {
    std::string test = "rnbqkbnr/pppppppp/8/4b3/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    slide_generator(&startpos, startpos.maps[b_bishop], not_own, &get_bishop_attacks); // bishop moves

    EXPECT_EQ (startpos.moves.size(), 8);
}

TEST(correct_moves_generated, e5_black_bishop) {
    std::string test = "rnbqkbnr/pppppppp/8/4b3/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    slide_generator(&startpos, startpos.maps[b_bishop], not_own, &get_bishop_attacks); // bishop moves

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 8);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "e5b2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "e5c3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "e5d4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "e5d6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),   "e5f4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),   "e5f6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),   "e5g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),   "e5h2");
}

//
// START WHITE ROOK GENERATION TESTS ///////////////////////////////////////////
//

TEST(number_of_moves_generated, startpos_white_rook) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[w_pieces]);
    slide_generator(&startpos, startpos.maps[w_rook], not_own, &get_rook_attacks); // bishop moves

    EXPECT_EQ (startpos.moves.size(), 0);
}

TEST(number_of_moves_generated, e5_white_rook) {
    std::string test = "rnbqkbnr/pppppppp/8/4R3/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[w_pieces]);
    slide_generator(&startpos, startpos.maps[w_rook], not_own, &get_rook_attacks); // bishop moves

    EXPECT_EQ (startpos.moves.size(), 11);
}

TEST(correct_moves_generated, e5_white_rook) {
    std::string test = "rnbqkbnr/pppppppp/8/4R3/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[w_pieces]);
    slide_generator(&startpos, startpos.maps[w_rook], not_own, &get_rook_attacks); // bishop moves

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 11);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "e5a5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "e5b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "e5c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "e5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "e5e3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "e5e4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "e5e6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "e5e7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "e5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),    "e5g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "e5h5");
}

//
// START BLACK ROOK GENERATION TESTS ///////////////////////////////////////////
//

TEST(number_of_moves_generated, startpos_black_rook) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    slide_generator(&startpos, startpos.maps[b_rook], not_own, &get_rook_attacks); // bishop moves

    EXPECT_EQ (startpos.moves.size(), 0);
}

TEST(number_of_moves_generated, e5_black_rook) {
    std::string test = "rnbqkbnr/pppppppp/8/4r3/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    slide_generator(&startpos, startpos.maps[b_rook], not_own, &get_rook_attacks); // bishop moves

    EXPECT_EQ (startpos.moves.size(), 11);
}

TEST(correct_moves_generated, e5_black_rook) {
    std::string test = "rnbqkbnr/pppppppp/8/4r3/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    slide_generator(&startpos, startpos.maps[b_rook], not_own, &get_rook_attacks); // bishop moves

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 11);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "e5a5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "e5b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "e5c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "e5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "e5e2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "e5e3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "e5e4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "e5e6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "e5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),    "e5g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "e5h5");
}

//
// START WHITE QUEEN GENERATION TESTS ///////////////////////////////////////////
//

TEST(number_of_moves_generated, startpos_white_queen) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[w_pieces]);
    slide_generator(&startpos, startpos.maps[w_queen], not_own, &get_queen_attacks); // bishop moves

    EXPECT_EQ (startpos.moves.size(), 0);
}

TEST(number_of_moves_generated, e5_white_queen) {
    std::string test = "rnbqkbnr/pppppppp/8/4Q3/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[w_pieces]);
    slide_generator(&startpos, startpos.maps[w_queen], not_own, &get_queen_attacks); // bishop moves

    EXPECT_EQ (startpos.moves.size(), 19);
}

TEST(correct_moves_generated, e5_white_queen) {
    std::string test = "rnbqkbnr/pppppppp/8/4Q3/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[w_pieces]);
    slide_generator(&startpos, startpos.maps[w_queen], not_own, &get_queen_attacks); // bishop moves

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 19);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),     "e5a5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),     "e5b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),     "e5c3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),     "e5c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),     "e5c7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),     "e5d4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),     "e5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),     "e5d6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),     "e5e3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),     "e5e4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),    "e5e6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),    "e5e7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),    "e5f4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),    "e5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),    "e5f6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[15]),    "e5g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[16]),    "e5g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[17]),    "e5g7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[18]),    "e5h5");
}

//
// START BLACK QUEEN GENERATION TESTS ///////////////////////////////////////////
//

TEST(number_of_moves_generated, startpos_black_queen) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    slide_generator(&startpos, startpos.maps[b_queen], not_own, &get_queen_attacks); // bishop moves

    EXPECT_EQ (startpos.moves.size(), 0);
}

TEST(number_of_moves_generated, e5_black_queen) {
    std::string test = "rnbqkbnr/pppppppp/8/4q3/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    slide_generator(&startpos, startpos.maps[b_queen], not_own, &get_queen_attacks); // bishop moves

    EXPECT_EQ (startpos.moves.size(), 19);
}

TEST(correct_moves_generated, e5_black_queen) {
    std::string test = "rnbqkbnr/pppppppp/8/4q3/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    slide_generator(&startpos, startpos.maps[b_queen], not_own, &get_queen_attacks); // bishop moves

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 19);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),     "e5a5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),     "e5b2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),     "e5b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),     "e5c3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),     "e5c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),     "e5d4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),     "e5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),     "e5d6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),     "e5e2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),     "e5e3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),    "e5e4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),    "e5e6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),    "e5f4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),    "e5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),    "e5f6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[15]),    "e5g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[16]),    "e5g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[17]),    "e5h2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[18]),    "e5h5");
}

//
// START WHITE KING GENERATION TESTS ///////////////////////////////////////////
//

TEST(number_of_moves_generated, startpos_white_king) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[w_pieces]);
    leaper_generator(&startpos, startpos.maps[w_king], not_own, king_moves);          // king moves

    EXPECT_EQ (startpos.moves.size(), 0);
}

TEST(number_of_moves_generated, middleboard_white_king) {
    std::string test = "rnbqkbnr/pppppppp/8/8/4K3/8/PPPPPPPP/RNBQ1BNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[w_pieces]);
    leaper_generator(&startpos, startpos.maps[w_king], not_own, king_moves);          // king moves

    EXPECT_EQ (startpos.moves.size(), 8);
}

TEST(number_of_moves_generated, pressed_white_king) {
    std::string test = "rnbqkbnr/pppppppp/8/8/4K3/8/PPPPPPPP/RNBQ1BNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[w_pieces]);
    leaper_generator(&startpos, startpos.maps[w_king], not_own, king_moves);          // king moves

    EXPECT_EQ (startpos.moves.size(), 8);
}

TEST(number_of_moves_generated, pressed_white_king_towards_check) {
    std::string test = "rnbqkbnr/pppppppp/8/4K3/8/8/PPPPPPPP/RNBQ1BNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    leaper_generator(&startpos, startpos.maps[w_king], not_own, king_moves);          // king moves

    EXPECT_EQ (startpos.moves.size(), 5);
}

TEST(number_of_moves_generated, black_rook_white_king_cross_section) {
    std::string test = "3r4/8/8/r2K4/8/8/8/8 w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    leaper_generator(&startpos, startpos.maps[w_king], not_own, king_moves);          // king moves

    EXPECT_EQ (startpos.moves.size(), 4);
}

TEST(correct_moves_generated, middleboard_white_king) {
    std::string test = "rnbqkbnr/pppppppp/8/4K3/8/8/PPPPPPPP/RNBQ1BNR w KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[w_pieces]);
    leaper_generator(&startpos, startpos.maps[w_king], not_own, king_moves);          // king moves

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 5);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "e5d4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "e5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "e5e4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "e5f4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),   "e5f5");
}

//
// START BLACK KING GENERATION TESTS ///////////////////////////////////////////
//

TEST(number_of_moves_generated, startpos_black_king) {
    std::string test = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    leaper_generator(&startpos, startpos.maps[b_king], not_own, king_moves);          // king moves

    EXPECT_EQ (startpos.moves.size(), 0);
}

TEST(number_of_moves_generated, middleboard_black_king) {
    std::string test = "rnbq1bnr/pppppppp/8/4k3/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    leaper_generator(&startpos, startpos.maps[b_king], not_own, king_moves);          // king moves

    EXPECT_EQ (startpos.moves.size(), 8);
}

TEST(number_of_moves_generated, pressed_black_king) {
    std::string test = "rnbq1bnr/pppppppp/8/4k3/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    leaper_generator(&startpos, startpos.maps[b_king], not_own, king_moves);          // king moves

    EXPECT_EQ (startpos.moves.size(), 8);
}

TEST(number_of_moves_generated, pressed_black_king_towards_check) {
    std::string test = "rnbq1bnr/pppppppp/8/8/4k3/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    leaper_generator(&startpos, startpos.maps[b_king], not_own, king_moves);          // king moves

    EXPECT_EQ (startpos.moves.size(), 5);
}

TEST(number_of_moves_generated, white_rook_black_king_cross_section) {
    std::string test = "3R4/8/8/R2k4/8/8/8/8 b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    leaper_generator(&startpos, startpos.maps[b_king], not_own, king_moves);          // king moves

    EXPECT_EQ (startpos.moves.size(), 4);
}

TEST(correct_moves_generated, middleboard_black_king) {
    std::string test = "rnbq1bnr/pppppppp/8/4k3/8/8/PPPPPPPP/RNBQKBNR b KQkq - 0 1";
    Position startpos(test);

    bitboard not_own = ~(startpos.maps[b_pieces]);
    leaper_generator(&startpos, startpos.maps[b_king], not_own, king_moves);          // king moves

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 8);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "e5d4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "e5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "e5d6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "e5e4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),   "e5e6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),   "e5f4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),   "e5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),   "e5f6");
}

TEST(correct_moves_generated, white_pawn_promotion_left) {
    std::string test = "rnb1kbnr/ppPppppp/8/8/8/8/8/8 w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 4);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "c7b8B");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "c7b8N");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "c7b8Q");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "c7b8R");
}

TEST(correct_moves_generated, white_pawn_promotion_forward) {
    std::string test = "r3kbnr/ppPppppp/8/8/8/8/8/8 w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 4);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "c7c8B");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "c7c8N");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "c7c8Q");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "c7c8R");
}

TEST(correct_moves_generated, white_pawn_promotion_right) {
    std::string test = "r1bnkbnr/ppPppppp/8/8/8/8/8/8 w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 4);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "c7d8B");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "c7d8N");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "c7d8Q");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "c7d8R");
}

TEST(correct_moves_generated, white_pawn_promotion_introducing_check) {
    std::string test = "rnr1kbnr/ppPppppp/8/8/8/8/8/2K5 w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 5);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "c1b1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "c1b2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "c1c2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "c1d1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),   "c1d2");
}

TEST(correct_moves_generated, black_pawn_promotion_right) {
    std::string test = "8/8/8/8/8/8/PPpPPPPP/RNB1KBNR b KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 4);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "c2b1b");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "c2b1n");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "c2b1q");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "c2b1r");
}

TEST(correct_moves_generated, black_pawn_promotion_forward) {
    std::string test = "8/8/8/8/8/8/PPpPPPPP/R3KBNR b KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 4);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "c2c1b");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "c2c1n");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "c2c1q");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "c2c1r");
}

TEST(correct_moves_generated, black_pawn_promotion_left) {
    std::string test = "8/8/8/8/8/8/PPpPPPPP/R1BNKBNR b KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    ASSERT_EQ(startpos.moves.size(), 4);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),   "c2d1b");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),   "c2d1n");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),   "c2d1q");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),   "c2d1r");
}

TEST(correct_moves_generated, custom_complex_position_1) {
    std::string test = "r1bqkb1r/1pp2ppp/2n5/3pp3/2P5/8/P2PP1PP/qN1K1BNn w - - 0 10";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 17);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "a2a3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "a2a4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "c4c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "c4d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "d1c1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "d1c2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "d1e1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "d2d3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "d2d4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),    "e2e3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "e2e4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "g1f3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),   "g1h3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),   "g2g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),   "g2g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[15]),   "h2h3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[16]),   "h2h4");
}

TEST(correct_moves_generated, custom_complex_position_1_b) {
    std::string test = "r1bqkb1r/1pp2ppp/2n5/3pp3/2P5/8/P2PP1PP/qN1K1BNn b - - 0 10";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 50);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "a1a2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "a1b1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "a1b2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "a1c3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "a1d4");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "a8a2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "a8a3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "a8a4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "a8a5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),   "a8a6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "a8a7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "a8b8");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),   "b7b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),   "b7b6");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),   "c6a5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[15]),   "c6a7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[16]),   "c6b4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[17]),   "c6b8");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[18]),   "c6d4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[19]),   "c6e7");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[20]),   "c8d7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[21]),   "c8e6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[22]),   "c8f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[23]),   "c8g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[24]),   "c8h3");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[25]),   "d5c4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[26]),   "d5d4");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[27]),   "d8d6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[28]),   "d8d7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[29]),   "d8e7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[30]),   "d8f6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[31]),   "d8g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[32]),   "d8h4");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[33]),   "e5e4");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[34]),   "e8d7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[35]),   "e8e7");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[36]),   "f7f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[37]),   "f7f6");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[38]),   "f8a3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[39]),   "f8b4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[40]),   "f8c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[41]),   "f8d6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[42]),   "f8e7");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[43]),   "g7g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[44]),   "g7g6");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[45]),   "h1f2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[46]),   "h1g3");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[47]),   "h7h5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[48]),   "h7h6");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[49]),   "h8g8");

}

// Complex positions found on https://www.chessprogramming.org/Perft_Results
TEST(number_of_moves_generated, complex_position_2) { 
    std::string test = "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    EXPECT_EQ (startpos.moves.size(), 48);
}

TEST(number_of_moves_generated, complex_position_3) {
    std::string test = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    EXPECT_EQ (startpos.moves.size(), 14);
}

TEST(number_of_moves_generated, complex_position_4) {
    std::string test = "r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    EXPECT_EQ (startpos.moves.size(), 6);
}

TEST(number_of_moves_generated, complex_position_5) {
    std::string test = "rnbq1k1r/pp1Pbppp/2p5/8/2B5/8/PPP1NnPP/RNBQK2R w KQ - 1 8";
    //test = "rnbqkb1r/pp1p1ppp/2p5/4P3/2B5/8/PPP1NnPP/RNBQK2R w KQkq - 0 6";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 44);
}

TEST(number_of_moves_generated, complex_position_6) {
    std::string test = "r4rk1/1pp1qppp/p1np1n2/2b1p1B1/2B1P1b1/P1NP1N2/1PP1QPPP/R4RK1 w - - 0 10";
    Position startpos(test);

    generate_moves(&startpos);

    EXPECT_EQ (startpos.moves.size(), 46);
}

TEST(number_of_moves_generated, custom_complex_position_1) {
    std::string test = "r1bqkb1r/1pp2ppp/2n5/3pp3/2P5/8/P2PP1PP/qN1K1BNn w - - 0 10";
    Position startpos(test);

    generate_moves(&startpos);

    EXPECT_EQ (startpos.moves.size(), 17);
}

TEST(number_of_moves_generated, custom_complex_position_1_b) {
    std::string test = "r1bqkb1r/1pp2ppp/2n5/3pp3/2P5/8/P2PP1PP/qN1K1BNn b - - 0 10";
    Position startpos(test);

    generate_moves(&startpos);

    EXPECT_EQ (startpos.moves.size(), 50);
}

TEST(correct_moves_generated, complex_position_3_perft) {
    std::string test = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 14);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "a5a4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "a5a6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "b4a4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "b4b1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "b4b2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "b4b3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "b4c4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "b4d4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "b4e4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),    "b4f4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "e2e3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "e2e4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),   "g2g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),   "g2g4");
}

TEST(correct_moves_generated, complex_position_3_perft_move_1) {
    std::string test = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
    Position startpos(test);

    startpos.move("a5a4");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 15);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "c7c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "c7c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "d6d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "h4g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "h4g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "h4g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "h5b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "h5c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "h5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),    "h5e5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "h5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "h5g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),   "h5h6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),   "h5h7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),   "h5h8");
}

TEST(correct_moves_generated, complex_position_3_perft_move_2) {
    std::string test = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
    Position startpos(test);

    startpos.move("a5a6");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 15);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "c7c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "c7c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "d6d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "h4g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "h4g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "h4g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "h5b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "h5c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "h5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),    "h5e5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "h5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "h5g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),   "h5h6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),   "h5h7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),   "h5h8");
}

TEST(correct_moves_generated, complex_position_3_perft_move_3) {
    std::string test = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
    Position startpos(test);

    startpos.move("b4a4");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 15);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "c7c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "c7c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "d6d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "h4g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "h4g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "h4g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "h5b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "h5c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "h5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),    "h5e5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "h5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "h5g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),   "h5h6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),   "h5h7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),   "h5h8");
}

TEST(correct_moves_generated, complex_position_3_perft_move_4) {
    std::string test = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
    Position startpos(test);

    startpos.move("b4b1");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 16);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "c7c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "c7c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "d6d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "f4f3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "h4g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "h4g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "h4g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "h5b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "h5c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),    "h5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "h5e5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "h5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),   "h5g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),   "h5h6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),   "h5h7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[15]),   "h5h8");
}

TEST(correct_moves_generated, complex_position_3_perft_move_5) {
    std::string test = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
    Position startpos(test);

    startpos.move("b4b2");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 16);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "c7c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "c7c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "d6d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "f4f3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "h4g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "h4g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "h4g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "h5b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "h5c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),    "h5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "h5e5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "h5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),   "h5g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),   "h5h6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),   "h5h7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[15]),   "h5h8");
}

TEST(correct_moves_generated, complex_position_3_perft_move_6) {
    std::string test = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
    Position startpos(test);

    startpos.move("b4b3");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 15);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "c7c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "c7c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "d6d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "f4f3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "h4g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "h4g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "h5b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "h5c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "h5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),    "h5e5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "h5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "h5g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),   "h5h6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),   "h5h7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),   "h5h8");
}

TEST(correct_moves_generated, complex_position_3_perft_move_7) {
    std::string test = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
    Position startpos(test);

    startpos.move("b4c4");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 15);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "c7c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "c7c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "d6d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "h4g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "h4g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "h4g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "h5b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "h5c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "h5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),    "h5e5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "h5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "h5g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),   "h5h6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),   "h5h7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),   "h5h8");
}

TEST(correct_moves_generated, complex_position_3_perft_move_8) {
    std::string test = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
    Position startpos(test);

    startpos.move("b4d4");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 15);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "c7c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "c7c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "d6d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "h4g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "h4g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "h4g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "h5b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "h5c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "h5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),    "h5e5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "h5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "h5g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),   "h5h6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),   "h5h7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),   "h5h8");
}

TEST(correct_moves_generated, complex_position_3_perft_move_9) {
    std::string test = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
    Position startpos(test);

    startpos.move("b4e4");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 15);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "c7c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "c7c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "d6d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "h4g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "h4g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "h4g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "h5b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "h5c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "h5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),    "h5e5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "h5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "h5g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),   "h5h6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),   "h5h7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),   "h5h8");
}

TEST(correct_moves_generated, complex_position_3_perft_move_10) {
    std::string test = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
    Position startpos(test);

    startpos.move("b4f4");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 2);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "h4g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "h4g5");
}

TEST(correct_moves_generated, complex_position_3_perft_move_11) {
    std::string test = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
    Position startpos(test);

    startpos.move("e2e3");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 15);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "c7c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "c7c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "d6d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "h4g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "h4g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "h4g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "h5b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "h5c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "h5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),    "h5e5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "h5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "h5g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),   "h5h6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),   "h5h7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),   "h5h8");
}

TEST(correct_moves_generated, complex_position_3_perft_move_12) {
    std::string test = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
    Position startpos(test);

    startpos.move("e2e4");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 16);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "c7c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "c7c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "d6d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "f4f3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "h4g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "h4g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "h4g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "h5b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "h5c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),    "h5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "h5e5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "h5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),   "h5g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),   "h5h6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),   "h5h7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[15]),   "h5h8");
}

TEST(correct_moves_generated, complex_position_3_perft_move_13) {
    std::string test = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
    Position startpos(test);

    startpos.move("g2g3");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 4);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "h4g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "h4g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "h4g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "h4h3");
}

TEST(correct_moves_generated, complex_position_3_perft_move_14) {
    std::string test = "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1";
    Position startpos(test);

    startpos.move("g2g4");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 17);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "c7c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "c7c6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "d6d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "f4f3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),    "h4g3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),    "h4g4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),    "h4g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),    "h4h3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),    "h5b5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),    "h5c5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),   "h5d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),   "h5e5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),   "h5f5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),   "h5g5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),   "h5h6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[15]),   "h5h7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[16]),   "h5h8");
}

//
// START CASTLING TESTS ////////////////////////////////////////////////////////
//

TEST(correct_moves_generated, castle_w_kingside) {
    std::string test = "8/8/8/8/8/8/8/4K2R w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 15);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),     "e1d1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),     "e1d2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),     "e1e2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),     "e1f1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),     "e1f2");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),     "e1g1");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),     "h1f1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),     "h1g1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),     "h1h2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),     "h1h3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),    "h1h4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),    "h1h5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),    "h1h6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),    "h1h7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),    "h1h8");
}

TEST(correct_moves_generated, castling_rights_correct_after_w_kingside) {
    std::string test = "8/8/8/8/8/8/8/4K2R w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves[5].maps[castle_rights], castle_string_to_index.at("kq"));
}

TEST(correct_moves_generated, king_bitboard_correct_after_w_kingside) {
    std::string test = "8/8/8/8/8/8/8/4K2R w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves[5].maps[w_king], squares[6]);
}

TEST(correct_moves_generated, rook_bitboard_correct_after_w_kingside) {
    std::string test = "8/8/8/8/8/8/8/4K2R w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves[5].maps[w_rook], squares[5]);
}

TEST(correct_moves_generated, white_bitboard_correct_after_w_kingside) {
    std::string test = "8/8/8/8/8/8/8/4K2R w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves[5].maps[w_pieces], squares[6] | squares[5]);
}

TEST(correct_moves_generated, checked_w_king) {
    std::string test = "4q3/8/8/8/8/8/8/4K2R w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 4);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),     "e1d1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),     "e1d2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),     "e1f1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),     "e1f2");
}

TEST(correct_moves_generated, checked_w_king_castle) {
    std::string test = "5q2/8/8/8/8/8/8/4K2R w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 12);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),     "e1d1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),     "e1d2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),     "e1e2");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),     "h1f1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),     "h1g1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),     "h1h2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),     "h1h3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),     "h1h4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),     "h1h5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),     "h1h6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),    "h1h7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),    "h1h8");

}

TEST(correct_moves_generated, checked_w_king_castle_2) {
    std::string test = "6q1/8/8/8/8/8/8/4K2R w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 14);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),     "e1d1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),     "e1d2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),     "e1e2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),     "e1f1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),     "e1f2");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),     "h1f1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),     "h1g1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),     "h1h2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),     "h1h3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),     "h1h4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),     "h1h5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),    "h1h6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),    "h1h7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),    "h1h8");
}

TEST(correct_moves_generated, checked_w_king_castle_3) {
    std::string test = "7q/8/8/8/8/8/8/4K2R w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 15);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),     "e1d1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),     "e1d2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),     "e1e2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),     "e1f1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),     "e1f2");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),     "e1g1");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),     "h1f1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),     "h1g1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),     "h1h2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),     "h1h3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),     "h1h4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),    "h1h5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),    "h1h6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),    "h1h7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),    "h1h8");
}

TEST(correct_moves_generated, castle_w_queenside) {
    std::string test = "8/8/8/8/8/8/8/R3K3 w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 16);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),     "a1a2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),     "a1a3");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),     "a1a4");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),     "a1a5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[4]),     "a1a6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[5]),     "a1a7");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[6]),     "a1a8");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[7]),     "a1b1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[8]),     "a1c1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[9]),     "a1d1");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[10]),    "e1c1");

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[11]),    "e1d1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[12]),    "e1d2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[13]),    "e1e2");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[14]),    "e1f1");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[15]),    "e1f2");
}

TEST(correct_moves_generated, castling_rights_correct_after_w_queenside) {
    std::string test = "8/8/8/8/8/8/8/R3K3 w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves[10].maps[castle_rights], castle_string_to_index.at("kq"));
}

TEST(correct_moves_generated, queen_bitboard_correct_after_w_queenside) {
    std::string test = "8/8/8/8/8/8/8/R3K3 w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves[10].maps[w_king], squares[2]);
}

TEST(correct_moves_generated, rook_bitboard_correct_after_w_queenside) {
    std::string test = "8/8/8/8/8/8/8/R3K3 w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves[10].maps[w_rook], squares[3]);
}

TEST(correct_moves_generated, white_bitboard_correct_after_w_queenside) {
    std::string test = "8/8/8/8/8/8/8/R3K3 w KQkq - 0 1";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves[10].maps[w_pieces], squares[2] | squares[3]);
}

//
// START CHESS960 TESTS ////////////////////////////////////////////////////////
//

TEST(correct_number_moves_generated, 960_position_001_depth_1) {
    std::string test = "bqnb1rkr/pp3ppp/3ppn2/2p5/5P2/P2P4/NPP1P1PP/BQ1BNRKR w - - 2 9";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 21);
}

TEST(correct_number_moves_generated, 960_position_002_depth_1) {
    std::string test = "2nnrbkr/p1qppppp/8/1ppb4/6PP/3PP3/PPP2P2/BQNNRBKR w - - 1 9";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 21);
}

TEST(correct_number_moves_generated, 960_position_004_depth_1) {
    std::string test = "qbbnnrkr/2pp2pp/p7/1p2pp2/8/P3PP2/1PPP1KPP/QBBNNR1R w - - 0 9";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 22);
}

TEST(correct_number_moves_generated, 960_position_005_depth_1) {
    std::string test = "1nbbnrkr/p1p1ppp1/3p4/1p3P1p/3Pq2P/8/PPP1P1P1/QNBBNRKR w - - 0 9";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 28);
}

TEST(correct_number_moves_generated, 960_position_007_depth_1) {
    std::string test = "q1bnrkr1/ppppp2p/2n2p2/4b1p1/2NP4/8/PPP1PPPP/QNB1RRKB w - - 1 9";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 30);
}

TEST(correct_number_moves_generated, 960_position_008_depth_1) {
    std::string test = "qbn1brkr/ppp1p1p1/2n4p/3p1p2/P7/6PP/QPPPPP2/1BNNBRKR w - - 0 9";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 25);
}

TEST(correct_number_moves_generated, 960_position_009_depth_1) {
    std::string test = "qnnbbrkr/1p2ppp1/2pp3p/p7/1P5P/2NP4/P1P1PPP1/Q1NBBRKR w - - 0 9";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 24);
}

TEST(correct_number_moves_generated, 960_position_010_depth_1) {
    std::string test = "qn1rbbkr/ppp2p1p/1n1pp1p1/8/3P4/P6P/1PP1PPPK/QNNRBB1R w - - 2 9";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 28);
}

//
// KING_IN_CHECK
//
TEST(correct_number_moves_generated, king_in_check) {
    std::string test = "qn1rkrbb/pp1p1ppp/2p1p3/3n4/4P2P/2NP4/PPP2PP1/Q1NRKRBB w - - 1 9";
    Position startpos(test);

    startpos.move_pawn_double_forward("a2a4");
    startpos.move_pawn_double_forward("a7a5");
    startpos.move_pawn_double_forward("b2b4");
    startpos.move("e8e7");
    startpos.move("c3d5");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 4);

    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[0]),    "c6d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[1]),    "e6d5");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[2]),    "e7d6");
    EXPECT_EQ(find_move_taken(&startpos, &startpos.moves[3]),    "e7e8");

}

TEST(correct_number_moves_generated, king_in_check_a2a4) {
    std::string test = "qn1rkrbb/pp1p1ppp/2p1p3/3n4/4P2P/2NP4/PPP2PP1/Q1NRKRBB w - - 1 9";
    Position startpos(test);

    startpos.move_pawn_double_forward("a2a4");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 24);

}

TEST(correct_number_moves_generated, king_in_check_a7a5) {
    std::string test = "qn1rkrbb/pp1p1ppp/2p1p3/3n4/P3P2P/2NP4/1PP2PP1/Q1NRKRBB b - a3 0 10";
    Position startpos(test);

    startpos.move_pawn_double_forward("a7a5");
    // qn1rkrbb/1p1p1ppp/2p1p3/p2n4/P3P2P/2NP4/1PP2PP1/Q1NRKRBB w - a6 1 10

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 25);

}

TEST(correct_number_moves_generated, king_in_check_b2b4) {
    std::string test = "qn1rkrbb/1p1p1ppp/2p1p3/p2n4/P3P2P/2NP4/1PP2PP1/Q1NRKRBB w - a6 1 10";
    Position startpos(test);

    startpos.move_pawn_double_forward("b2b4");
    // qn1rkrbb/1p1p1ppp/2p1p3/p2n4/PP2P2P/2NP4/2P2PP1/Q1NRKRBB b - a3 0 11

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 25);

}

TEST(correct_number_moves_generated, king_in_check_e8e7) {
    std::string test = "qn1rkrbb/1p1p1ppp/2p1p3/p2n4/PP2P2P/2NP4/2P2PP1/Q1NRKRBB b - a3 0 11";
    Position startpos(test);

    startpos.move("e8e7");
    // qn1r1rbb/1p1pkppp/2p1p3/p2n4/PP2P2P/2NP4/2P2PP1/Q1NRKRBB w - - 1 11

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 26);

}

TEST(correct_number_moves_generated, random_pos_001) {
    std::string test = "r4r2/2p1qppk/p1np1n2/1pb1p1Bp/1PB1P1bP/P1NP1N2/2P1QPP1/R4RK1 b - - 1 12";
    Position startpos(test);

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.moves.size(), 45);
}

TEST(correct_number_moves_generated, random_pos_002) {
    std::string test = "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1";
    Position startpos(test);

    startpos.move_pawn_double_forward("a2a4");
    EXPECT_EQ (startpos.maps[passant_sq], 0x0000000000010000);
    startpos.move_pawn_double_forward("c7c5");
    EXPECT_EQ (startpos.maps[passant_sq], 0x0000040000000000);
    startpos.move("e1d1");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.is_black_move(), true);

    EXPECT_EQ (startpos.w_kingside_castle(),  false);
    EXPECT_EQ (startpos.w_queenside_castle(), false);
    EXPECT_EQ (startpos.b_kingside_castle(),  true);
    EXPECT_EQ (startpos.b_queenside_castle(), true);

    EXPECT_EQ (startpos.maps[passant_sq], 0);

    //EXPECT_EQ (,true);

    EXPECT_EQ (startpos.moves.size(), 41);
}

TEST(correct_number_moves_generated, random_pos_003) {
    std::string test = "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1";
    Position startpos(test);

    startpos.move("e2d1");
    startpos.move("a6f1");
    startpos.move("e5f7");
    startpos.move("a8b8");
    startpos.move("h1g1");

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.w_kingside_castle(),  false);
    EXPECT_EQ (startpos.w_queenside_castle(), true);
    EXPECT_EQ (startpos.b_kingside_castle(),  true);
    EXPECT_EQ (startpos.b_queenside_castle(), false);

    EXPECT_EQ (startpos.moves.size(), 48);
}

TEST(correct_number_moves_generated, random_pos_004) {
    std::string test = "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1";
    Position startpos(test);

    startpos.move("e2d1");
    startpos.move("a6f1");
    startpos.move("e5f7");
    startpos.move("a8b8");
    startpos.move("h1g1");
    startpos.castle(c_b_king);
    startpos.move("f7h6");

    // 1r3rk1/p1ppq1b1/1n2pnpN/3P4/1p2P3/2N2Q1p/PPPB1PPP/R2BKbR1 b Q - 0 1

    generate_moves(&startpos);

    std::sort(startpos.moves.begin(), startpos.moves.end(), 
            [&startpos](Position &a, Position &b) { return find_move_taken(&startpos, &a) < find_move_taken(&startpos, &b); });

    EXPECT_EQ (startpos.is_black_move(),  true);

    EXPECT_EQ (startpos.w_kingside_castle(),  false);
    EXPECT_EQ (startpos.w_queenside_castle(), true);
    EXPECT_EQ (startpos.b_kingside_castle(),  false);
    EXPECT_EQ (startpos.b_queenside_castle(), false);

    EXPECT_EQ (startpos.maps[passant_sq], 0);

    EXPECT_EQ (startpos.maps[w_pieces],   0x000080081024EF59);
    EXPECT_EQ (startpos.maps[b_pieces],   0x625D720002800020);

    EXPECT_EQ (startpos.maps[w_pawn],   0x000000081000E700);
    EXPECT_EQ (startpos.maps[b_pawn],   0x000D500002800000);
    EXPECT_EQ (startpos.maps[w_rook],   0x0000000000000041);
    EXPECT_EQ (startpos.maps[b_rook],   0x2200000000000000);
    EXPECT_EQ (startpos.maps[w_knight], 0x0000800000040000);
    EXPECT_EQ (startpos.maps[b_knight], 0x0000220000000000);
    EXPECT_EQ (startpos.maps[w_bishop], 0x0000000000000808);
    EXPECT_EQ (startpos.maps[b_bishop], 0x0040000000000020);
    EXPECT_EQ (startpos.maps[w_king],   0x0000000000000010);
    EXPECT_EQ (startpos.maps[b_king],   0x4000000000000000);
    EXPECT_EQ (startpos.maps[w_queen],  0x0000000000200000);
    EXPECT_EQ (startpos.maps[b_queen],  0x0010000000000000);

    EXPECT_EQ (startpos.is_square_attacked(startpos.maps[b_king]), true);

    EXPECT_EQ (startpos.moves.size(), 3);
}

